{"version":3,"sources":["context/LocationContext.js","components/Header.js","components/AutocompleteInput.js","components/Map.js","components/Layout.js","components/App.js","index.js"],"names":["LocationContext","createContext","LocationProvider","children","useState","cityLocation","setCityLocation","Provider","value","StyledHeader","styled","header","Header","title","StyledInputWrapper","div","StyledForm","form","StyledInput","input","StyledAutocompleteList","StyledTipButton","button","AutocompleteInput","useForm","mode","defaultValues","inputLocation","register","watch","reset","handleSubmit","watchInput","useContext","location","setLocation","suggestedLocations","setSuggestedLocations","isServerError","setServerError","getLocation","searchText","a","axios","post","searchResponse","data","console","error","useEffect","searchResult","citesData","reduce","acc","curr","cityNameArray","display_name","split","cityName","length","push","name","lat","lon","onSubmit","handleLocationClick","selectedLocation","type","placeholder","pattern","map","uuid","uuidv4","locationName","onClick","StyledMapWrapper","Map","date","Date","y","getFullYear","m","getMonth","d","getDay","myDate","url","log","src","alt","StyledLayout","main","Layout","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d90967d.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children, ...otherProps }) => {\n  const [cityLocation, setCityLocation] = useState(null);\n\n  return (\n    <LocationContext.Provider value={[cityLocation, setCityLocation]}>\n      {children}\n    </LocationContext.Provider>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledHeader = styled.header`\n  --header-font-color: #252525;\n  width: 100%;\n  display: flex;\n  align-items: center;\n\n  & h1 {\n    color: var(--header-font-color);\n    font-size: 1.4rem;\n    line-height: 1.4rem;\n    margin: 0;\n  }\n`;\n\nconst Header = ({ title }) => {\n  return (\n    <StyledHeader>\n      <h1>{title}</h1>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { LocationContext } from '../context/LocationContext';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport styled from 'styled-components';\n\nconst StyledInputWrapper = styled.div`\n  z-index: 1;\n`;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: space-between;\n  max-width: 450px;\n  min-width: 300px;\n  min-height: 100%;\n  margin: 0 auto;\n`;\n\nconst StyledInput = styled.input`\n  --input-bg-color: #f5f5f5;\n  --input-font-color: #252525;\n  --input-border-color: #e7e7e7;\n  --input-outline-color: #addeff;\n  --input-border-size: 1px;\n  --input-border-radius: 5px;\n  background-color: var(--input-bg-color);\n  font-family: inherit;\n  font-size: 1rem;\n  font-size: max(16px, 1em);\n  color: var(--input-font-color);\n  padding: 0.25em 0.5em;\n  border-style: solid;\n  border-color: var(--input-border-color);\n  border-width: var(--input-border-size);\n  border-radius: var(--input-border-radius);\n  width: 100%;\n  cursor: pointer;\n  transition: 180ms box-shadow ease-in-out;\n\n  &:focus {\n    outline: 3px solid transparent;\n    box-shadow: 0 0 1px 2px var(--input-outline-color);\n  }\n`;\n\nconst StyledAutocompleteList = styled.div`\n  --list-bg-color: #f5f5f5;\n  --list-border-color: #e7e7e7;\n  --list-border-size: 1px;\n  --list-border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  background: var(--list-bg-color);\n  border-style: solid;\n  border-color: var(--list-border-color);\n  border-width: var(--list-border-size);\n  border-radius: var(--list-border-radius);\n  width: 100%;\n  height: auto;\n  z-index: 10;\n`;\n\nconst StyledTipButton = styled.button`\n  --button-bg-color: #f5f5f5;\n  --button-bg-hover-color: #f0f0f0;\n  --button-font-color: #252525;\n  --button-border-color: #e7e7e7;\n  --button-outline-color: #addeff;\n\n  display: flex;\n  background: var(--button-bg-color);\n  box-shadow: none;\n  color: var(--button-font-color);\n  font-family: inherit;\n  font-size: 1rem;\n  line-height: 1rem;\n  text-decoration: none;\n  border: none;\n  margin: 0;\n  padding: 0.5rem 1rem;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n  justify-content: start;\n  align-items: center;\n  width: 100%;\n\n  &:hover {\n    background: var(--button-bg-hover-color);\n  }\n\n  &:focus,\n  &:active {\n    outline: 3px solid transparent;\n    box-shadow: 0 0 1px 2px var(--button-outline-color);\n  }\n`;\n\nconst AutocompleteInput = () => {\n  // eslint-disable-next-line no-unused-vars\n  const { register, watch, handleSubmit, reset } = useForm({\n    mode: 'onChange',\n    defaultValues: { inputLocation: '' },\n  });\n  const watchInput = watch('inputLocation', '');\n  // eslint-disable-next-line no-unused-vars\n  const [cityLocation, setCityLocation] = useContext(LocationContext);\n  const [location, setLocation] = useState(null);\n  const [suggestedLocations, setSuggestedLocations] = useState([]);\n  const [isServerError, setServerError] = useState(false);\n\n  const getLocation = async (searchText) => {\n    try {\n      const searchResponse = await axios.post(\n        `https://nominatim.openstreetmap.org/search?city=${searchText}&format=json&zoom=10&limit=25`,\n      );\n      return searchResponse.data;\n    } catch (error) {\n      console.error(error);\n      return setServerError((isServerError) => true);\n    }\n  };\n\n  // eslint-disable-next-line\n  useEffect(async () => {\n    const searchResult = await getLocation(watchInput);\n    const citesData = searchResult.reduce((acc, curr) => {\n      const cityNameArray = curr.display_name.split(',');\n      const cityName = `${cityNameArray[0]} / ${cityNameArray[1]} / ${\n        cityNameArray[cityNameArray.length - 1]\n      }`;\n      acc.push({ name: cityName, lat: curr.lat, lon: curr.lon });\n      return acc;\n    }, []);\n    setSuggestedLocations((suggestedLocations) => citesData);\n  }, [watchInput]);\n\n  useEffect(() => {\n    location && setCityLocation((cityLocation) => location);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  const onSubmit = () => {\n    reset();\n  };\n\n  const handleLocationClick = async (selectedLocation) => {\n    setLocation((location) => selectedLocation);\n    onSubmit();\n  };\n\n  return (\n    <StyledInputWrapper>\n      <StyledForm handleSubmit={onSubmit}>\n        <StyledInput\n          type=\"text\"\n          placeholder=\"Search city...\"\n          {...register('inputLocation', { pattern: /^[A-Za-z]+$/i })}\n        />\n      </StyledForm>\n      {isServerError ? (\n        <spam>Server Error</spam>\n      ) : (\n        suggestedLocations.length > 0 && (\n          <StyledAutocompleteList>\n            {suggestedLocations.map((location) => {\n              const uuid = uuidv4();\n              const locationName = location.name;\n              return (\n                <StyledTipButton\n                  type=\"button\"\n                  key={uuid}\n                  onClick={() => handleLocationClick(location)}\n                >\n                  {locationName}\n                </StyledTipButton>\n              );\n            })}\n          </StyledAutocompleteList>\n        )\n      )}\n    </StyledInputWrapper>\n  );\n};\n\nexport default AutocompleteInput;\n","import React, { useContext } from 'react';\nimport { LocationContext } from '../context/LocationContext';\nimport styled from 'styled-components';\n\n// INFO: the below imports are commented due to the comment on line 61\n\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n// import { Icon } from 'leaflet';\n// import markerIconPng from 'leaflet/dist/images/marker-icon.png';\n// import 'leaflet/dist/leaflet.css';\n\nconst StyledMapWrapper = styled.div`\n  --span-font-color: #acacac;\n  --wrapper-bg-color: #f5f5f5;\n  --wrapper-border-color: #e7e7e7;\n  --wrapper-border-size: 1px;\n  --wrapper-border-radius: 5px;\n  background: var(--wrapper-bg-color);\n  border: solid var(--wrapper-border-size) var(--wrapper-border-color);\n  border-radius: var(--wrapper-border-radius);\n  width: 100%;\n  min-height: 300px;\n  max-height: 90vh;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: -1;\n  position: relative;\n\n  & span {\n    display: block;\n    font-size: 1rem;\n    color: var(--span-font-color);\n  }\n\n  & img {\n    width: 100%;\n    max-width: 880px;\n    max-height: 70vw;\n    height: auto;\n  }\n`;\n\n// Demo key\nconst API_KEY = 'DEMO_KEY';\n\nconst Map = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [cityLocation, setCityLocation] = useContext(LocationContext);\n  const date = new Date();\n  const y = date.getFullYear();\n  const m = date.getMonth() + 1;\n  const d = date.getDay();\n  const myDate = `${y}-${m}-${d}`;\n  const name = cityLocation?.name || '';\n  const lon = cityLocation?.lon || 0;\n  const lat = cityLocation?.lat || 0;\n  const url = `https://api.nasa.gov/planetary/earth/imagery?lon=${lon}&lat=${lat}&date=${myDate}&api_key=${API_KEY}`;\n\n  console.log(url);\n\n  return (\n    <StyledMapWrapper>\n      {!cityLocation ? (\n        <span>The map will be displayed here.</span>\n      ) : (\n        <img src={url} alt={name} />\n\n        // INFO: Somehow the leaflet map is trying to create a matrix of images filling out the container for that reason the use of NASA imagery is useless as it provides only one thumbnail image of a given location.\n        // INFO: Therefore I'm leaving the code here to change it with a better solution.\n\n        // <MapContainer\n        //   center={[lat, lon]}\n        //   zoom={13}\n        //   scrollWheelZoom={false}\n        //   style={{ width: '100%', height: '900px' }}\n        // >\n        //   <TileLayer\n        //     url={`https://api.nasa.gov/planetary/earth/imagery?lon=${lon}&lat=${lat}&date=${myDate}&api_key=${API_KEY}`}\n        //   />\n        //   <Marker\n        //     position={[lat, lon]}\n        //     icon={new Icon({ iconUrl: markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41] })}\n        //   >\n        //     <Popup>{name}</Popup>\n        //   </Marker>\n        // </MapContainer>\n      )}\n    </StyledMapWrapper>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLayout = styled.main`\n  display: grid;\n  grid-template-areas: 'header' 'search' 'map';\n  grid-template-rows: 1.8rem 2rem 1fr;\n  grid-gap: 1rem;\n  padding: 1rem;\n  max-width: 900px;\n  margin: 0 auto;\n`;\n\nfunction Layout({ children }) {\n  return <StyledLayout>{children}</StyledLayout>;\n}\n\nexport default Layout;\n","import React from 'react';\nimport 'normalize.css';\nimport { createGlobalStyle } from 'styled-components';\nimport { LocationProvider } from '../context/LocationContext';\nimport Header from './Header';\nimport AutocompleteInput from './AutocompleteInput';\nimport Map from './Map';\nimport Layout from './Layout';\n\nconst GlobalStyle = createGlobalStyle`\nhtml {\n  box-sizing: border-box;\n  font-size: 16px;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,\n    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n  background: #f8f8f8;\n}\n`;\n\nfunction App() {\n  return (\n    <LocationProvider>\n      <GlobalStyle />\n      <Layout>\n        <Header title={'Cities by NASA'} />\n        <AutocompleteInput />\n        <Map />\n      </Layout>\n    </LocationProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}